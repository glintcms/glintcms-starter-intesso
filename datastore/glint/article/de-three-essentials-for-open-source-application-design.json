{
  "title": "Three essentials for open source application design",
  "short": "Thoughts along our way of building open source applications.",
  "text": "<p><em>by Iain Duncan (</em><a href=\"https://twitter.com/Iain_Duncan\">@Iain_Duncan</a><em>)</em></p>\n\n<p>&nbsp;</p>\n\n<p>Building any application can be a daunting task, but building one that can be used and re-purposed by the open source software community has a certain flavour all of it&#39;s own.</p>\n\n<p><a href=\"http://www.glintcms.com/\"><img alt=\"Glint CMS\" src=\"/files/articles/three-essentials-for-open-source-application-design/1.jpg\" style=\"float:right; margin:10px 0px 10px 25px\" /></a></p>\n\n<p>If you are building and designing something that will be broken apart and reused by other developers as well as used for it&#39;s intended use as product by the man in the street, you face some unique challenges.</p>\n\n<p>This article is one that I started piecing together, as myself and lead developer Andi Neck at our company intesso, built our open source CMS called&nbsp;<a href=\"http://www.glintcms.com/\">Glint</a>. My main area of focus was UX, design and front-end development with Andi focusing on the back-end and database development. So there will might be a drop of back-end but this article will mainly cover the UX, site architecture, front-end and design of the project, however most of the principles can be carried over.</p>\n\n<h2>1. Know what it is you are NOT building</h2>\n\n<p><em>&quot;Without vision the people will perish&quot;</em></p>\n\n<p>The old saying &#39;if you fail to plan, you plan to fail&#39; is one of my favourites, and with good reason. All that being said it&#39;s pretty often that I find myself getting weighed down by over planning and trying to put in feature layered upon feature to make this application the best that has ever been.</p>\n\n<p>Recently while building Glint we decided to have a very clear definition of what the product was up front before a line of code was written or a pixel of paint was Photoshopped. With a clear vision we ran through a dedicated process during the principle UX(User experience) phase of our project.</p>\n\n<p>As we are a two man team on this project it would be easy to just have an idea, forgo any planning and execute. Although tempting we found that going this route ultimately ended up with both of us disappearing into silos, finishing parts of the CMS that clearly weren&#39;t as important or essential as we felt they were, showcasing them to the other party and then starting over again or having to do wholesale revisions.</p>\n\n<p>In the spirit of agile we came up with a mini planning session formula during the UX phase of each module&#39;s development that really helped us to keep on track and most importantly stop incorporating things we didn&#39;t actually need.</p>\n\n<p><img alt=\"Wireframe\" src=\"/files/articles/three-essentials-for-open-source-application-design/2.jpg\" style=\"float:right; margin:10px 0px 10px 25px\" /></p>\n\n<ul style=\"list-style-type:none\">\n\t<li>Discuss and plan which module we are going to build</li>\n\t<li>UX designer throws the idea out into the wild and does competitive analysis and some user research</li>\n\t<li>Throw the idea&#39;s and related UX research against the vision for our CMS</li>\n\t<li>Design wire frames for execution meeting</li>\n\t<li>Discuss execution and final module planning</li>\n\t<li>Chuck out any bloat and fluff that doesn&#39;t match against our defined product vision</li>\n\t<li>Build only what is absolutely necessary</li>\n\t<li>Keep secondary ideas that could be of use for iterative improvements once the application is live</li>\n</ul>\n\n<p>It&#39;s all too easy to fall into a mentality of agreement between developers, especially when you are working in small teams like ourselves. We instead decided to have a process that would help us to refine what it is we are designing and build only what is essential to our core vision. This is easier said than done and we have had many hours our arguments and strong discussion and hard decisions to make when deciding what not to include.</p>\n\n<p>Remember that many people enjoy the simplicity of applications like Twitter but most of us get trapped in feature creep and bloat just for the sake of thinking it makes what we build better. Most of the things we love we actually love for their simplicity and single mindedness of functionality. Strive towards taking more out of your software than you put in and you will be surprised that it in fact makes your product better, more focused on it&#39;s primary task and as a result easier for your customers to use.</p>\n\n<h2>2. Third party implementation</h2>\n\n<p><img alt=\"Third party logos\" src=\"/files/articles/three-essentials-for-open-source-application-design/3.jpg\" style=\"float:right; margin:10px 0px 10px 25px\" /></p>\n\n<p>We had to decide early on which 3rd party frameworks/plug ins etc. to use and when we needed to write our own. When it came to the front-end development of our CMS we had to take a hard look at the current wave of front-end frameworks that are gaining massive popularity. We feel it is vitally important to leverage knowledge already gained by many developers out there and make it easier for them to engage and be able to alter our code without being stuck in an overly obtuse world of our own creation.</p>\n\n<p>We wanted a few key things when it came to our front-end dev:</p>\n\n<ul style=\"list-style-type:none\">\n\t<li>Don&#39;t create something cryptic and overly complex if you don&#39;t need to</li>\n\t<li>Start with a framework to breed familiarity with other developers</li>\n\t<li>Make it easy for community input by using a well known framework</li>\n\t<li>Must be up dateable to future versions of the chosen framework without breaking the current build/layout</li>\n\t<li>Must be a separate layer from the core site CSS/HTML</li>\n</ul>\n\n<p>We ended up using Twitter&#39;s Bootstrap along with a few tweaks of our own:</p>\n\n<ul style=\"list-style-type:none\">\n\t<li>Custom LESS stylesheet that allows alterations and overrides to the Bootstrap framework without touching the core styles</li>\n\t<li>Using Grunt and&nbsp;<a href=\"https://github.com/intesso/csstransform\">csstransform</a>&nbsp;we allow for both our CMS and the core website it&#39;s built on top of to have 2 separate working versions of Bootstrap. This workaround allows a true separation of the core website&#39;s front-end from that of our CMS.</li>\n\t<li>Fully upgradeable and separate working version of Bootstrap for the CMS</li>\n</ul>\n\n<p>This is just one example of how we are trying to implement widely used frameworks into our project. We have a strong belief that in the end by using such we will ultimately make the project more open and easier for others to edit and add to in the future.</p>\n\n<h2>3. Structure, structure, structure!</h2>\n\n<p>The last but not least point that we learned while building Glint is that overall structure is one of the most vital things.</p>\n\n<p>When a product is going to be ripped apart and tinkered with by other developers it&#39;s important to have a well thought out structure in place. After having done hours and hours of competitive research this single point rose far above others when it came to ease of use for others to contribute to your project. Far too many open-source CMS projects have an overly long winded way of doing things and a steep learning curve when it comes to figuring out site architecture.</p>\n\n<p>SInce we were building a CMS one of the principle problems we had to deal with was creating a spaghetti mess of files and folders with mixed relationships all bungled together. We had to make sure there was a clear separation between the site that was built by the CMS (core site) and the CMS architecture itself.</p>\n\n<p>Here are some of the core principles we followed:</p>\n\n<ul style=\"list-style-type:none\">\n\t<li>Separate &#39;Website&#39; and &#39;Glint CMS&#39; parent folders</li>\n\t<li>Mirror sub folder structure under each tree e.g. both CMS and Website folders have App, Public, Vendor folders etc.</li>\n\t<li>Use the MVC model across both</li>\n\t<li>Build for extension, but still allow overrides</li>\n</ul>\n\n<p>By keeping a mirrored structure as much as possible it makes it far easier to switch and find core files across both the framework and website. It also means that after building a website users who fancy tinkering with the CMS can easily get started as as many of the fundamental structures and principles as possible have been carried across to the CMS framework.</p>\n\n<h2>Wrap up</h2>\n\n<p>Although still a work in progress we have learned many valuable lessons so far and hopefully these fundamentals will help you when building your own open-source applications.</p>\n\n<ul style=\"list-style-type:none\">\n\t<li>Strive towards taking more out of your software than you put in</li>\n\t<li>Play well with others and make it easier for other developers to contribute by making good use of 3rd party frameworks where applicable</li>\n\t<li>Structure, structure, structure! Keep a clean house and you&#39;ll make it more inviting for others to contribute</li>\n</ul>\n",
  "id": "de-three-essentials-for-open-source-application-design",
  "updatedAt": "2015-10-07T05:28:09.420Z",
  "createdAt": "2013-07-09T15:40:15.151Z",
  "meta": {
    "title": "glint cms",
    "description": "the invisible cms"
  },
  "locale": "de",
  "path": "three-essentials-for-open-source-application-design"
}